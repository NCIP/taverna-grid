package org.cagrid.cql.cqlbuilder.gui;

import java.awt.Cursor;
import java.awt.Font;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.RootPaneContainer;
import javax.swing.border.TitledBorder;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.cagrid.cql.cqlbuilder.cqlquery.CQLQuery;
import org.cagrid.cql.cqlbuilder.cqlquery.CQLQueryAssociation;
import org.cagrid.cql.cqlbuilder.cqlquery.CQLQueryCriterion;
import org.cagrid.cql.cqlbuilder.metadata.UMLClass;
import org.cagrid.cql.cqlbuilder.metadata.UMLClassAttribute;
import org.cagrid.cql.cqlbuilder.utils.Utils;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author Monika
 */
public class CQLBuilderMAIN extends javax.swing.JDialog {

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        inputUrl = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        bSumbitQuery = new javax.swing.JButton();
        bCancel = new javax.swing.JButton();
        checkAddInputData = new javax.swing.JCheckBox();
        bGoButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        tabbedMetadataPane = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        textPaneGeneralInfo = new javax.swing.JTextPane();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        textPaneSemMetadata = new javax.swing.JTextPane();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        textPaneDomainModel = new javax.swing.JTextPane();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        textPaneHostRes = new javax.swing.JTextPane();
        jPanel12 = new javax.swing.JPanel();
        tQueryTabb = new javax.swing.JTabbedPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        fQueryBuilderPanel = new javax.swing.JPanel();
        labelUmlClass = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        fCriteriaPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        rootNode = new DefaultMutableTreeNode(TREE_ROOT);
        treeModel = new DefaultTreeModel(rootNode);
        //treeModel.addTreeModelListener(new MyTreeModelListener());
        tQueryTree = new JTree(treeModel);
        mainGroupNode = new DefaultMutableTreeNode(TREE_LOGIC_AND);
        treeModel.insertNodeInto(mainGroupNode, rootNode, 0);
        jPanel5 = new javax.swing.JPanel();
        bNewCriterion = new javax.swing.JButton();
        bEditCriterion = new javax.swing.JButton();
        bDeleteCriterion = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        rAnd = new javax.swing.JRadioButton();
        rOr = new javax.swing.JRadioButton();
        bNewGroup = new javax.swing.JButton();
        bDeleteGroup = new javax.swing.JButton();
        fOutputTypePanel = new javax.swing.JPanel();
        rWholeObject = new javax.swing.JRadioButton();
        rCountOnly = new javax.swing.JRadioButton();
        rDistinctAttr = new javax.swing.JRadioButton();
        rSelectedAttrs = new javax.swing.JRadioButton();
        cDistinctAttr = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        listSelectedAttrs = new javax.swing.JList();
        lHoldCtrlToSelectMultipleItems = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listUmlClassesList = new javax.swing.JList();
        bNewQuery = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        saveAndConvertButton = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textpaneManualQuery = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CQL Builder");
        setIconImage(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel1.setText(" Service's URL:");

        inputUrl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        inputUrl.setText("http://array.nci.nih.gov/wsrf/services/cagrid/CaArraySvc");
        inputUrl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        inputUrl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputUrlKeyPressed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        bSumbitQuery.setText("Save the query");
        bSumbitQuery.setEnabled(false);
        bSumbitQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSumbitQueryActionPerformed(evt);
            }
        });

        bCancel.setText("Cancel");
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });

        checkAddInputData.setSelected(true);
        checkAddInputData.setText("add input for data service");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(497, Short.MAX_VALUE)
                .addComponent(checkAddInputData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bSumbitQuery)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bCancel)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bCancel, bSumbitQuery, checkAddInputData});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(bCancel)
                .addComponent(bSumbitQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(checkAddInputData))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bCancel, bSumbitQuery, checkAddInputData});

        bGoButton.setText("Go!");
        bGoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGoButtonActionPerformed(evt);
            }
        });

        jSplitPane1.setDividerLocation(180);
        jSplitPane1.setDividerSize(7);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setOneTouchExpandable(true);

        jPanel3.setPreferredSize(new java.awt.Dimension(864, 190));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("View service metadata"));

        tabbedMetadataPane.setEnabled(false);
        tabbedMetadataPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedMetadataPaneStateChanged(evt);
            }
        });

        jScrollPane5.setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane5.setViewportView(textPaneGeneralInfo);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 911, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedMetadataPane.addTab("General service information", jPanel7);

        jScrollPane6.setMinimumSize(new java.awt.Dimension(0, 0));

        textPaneSemMetadata.setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane6.setViewportView(textPaneSemMetadata);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 911, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedMetadataPane.addTab("Semantic metadata", jPanel8);

        jScrollPane7.setViewportView(textPaneDomainModel);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 911, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedMetadataPane.addTab("Domain model", jPanel9);

        jScrollPane8.setViewportView(textPaneHostRes);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 911, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedMetadataPane.addTab("Hosting research center", jPanel10);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedMetadataPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 936, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedMetadataPane, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jSplitPane1.setTopComponent(jPanel3);

        tQueryTabb.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tQueryTabb.setEnabled(false);
        tQueryTabb.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tQueryTabbStateChanged(evt);
            }
        });

        jSplitPane2.setDividerLocation(250);
        jSplitPane2.setOneTouchExpandable(true);

        labelUmlClass.setBackground(java.awt.SystemColor.controlLtHighlight);
        labelUmlClass.setEditable(false);
        labelUmlClass.setFont(new java.awt.Font("Tahoma", 1, 11));
        labelUmlClass.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        labelUmlClass.setEnabled(false);

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        fCriteriaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Set criteria"));

        tQueryTree.setModel(treeModel);
        tQueryTree.setEnabled(false);
        tQueryTree.setExpandsSelectedPaths(false);
        tQueryTree.setFocusable(false);
        tQueryTree.setShowsRootHandles(true);
        tQueryTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                tQueryTreeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(tQueryTree);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Criterion:"));

        bNewCriterion.setText("New..");
        bNewCriterion.setEnabled(false);
        bNewCriterion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewCriterionActionPerformed(evt);
            }
        });

        bEditCriterion.setText("Edit..");
        bEditCriterion.setEnabled(false);
        bEditCriterion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditCriterionActionPerformed(evt);
            }
        });

        bDeleteCriterion.setText("Delete..");
        bDeleteCriterion.setEnabled(false);
        bDeleteCriterion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteCriterionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(bNewCriterion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bEditCriterion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bDeleteCriterion))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bDeleteCriterion, bEditCriterion, bNewCriterion});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(bNewCriterion, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(bEditCriterion)
                .addComponent(bDeleteCriterion))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bDeleteCriterion, bEditCriterion, bNewCriterion});

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Logic group:"));

        buttonGroup1.add(rAnd);
        rAnd.setSelected(true);
        rAnd.setText("AND");
        rAnd.setEnabled(false);
        rAnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rAndActionPerformed(evt);
            }
        });

        buttonGroup1.add(rOr);
        rOr.setText("OR");
        rOr.setEnabled(false);
        rOr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rOrActionPerformed(evt);
            }
        });

        bNewGroup.setText("New");
        bNewGroup.setEnabled(false);
        bNewGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewGroupActionPerformed(evt);
            }
        });

        bDeleteGroup.setText("Delete..");
        bDeleteGroup.setEnabled(false);
        bDeleteGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteGroupActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rOr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rAnd, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bNewGroup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bDeleteGroup)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bDeleteGroup, bNewGroup});

        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bNewGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bDeleteGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(rAnd, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rOr, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bDeleteGroup, bNewGroup});

        javax.swing.GroupLayout fCriteriaPanelLayout = new javax.swing.GroupLayout(fCriteriaPanel);
        fCriteriaPanel.setLayout(fCriteriaPanelLayout);
        fCriteriaPanelLayout.setHorizontalGroup(
            fCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
            .addGroup(fCriteriaPanelLayout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        fCriteriaPanelLayout.setVerticalGroup(
            fCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fCriteriaPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel11, 0, 61, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)))
        );

        fOutputTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select output type"));

        buttonGroup2.add(rWholeObject);
        rWholeObject.setSelected(true);
        rWholeObject.setText("whole object");
        rWholeObject.setEnabled(false);
        rWholeObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rWholeObjectActionPerformed(evt);
            }
        });

        buttonGroup2.add(rCountOnly);
        rCountOnly.setText("count only");
        rCountOnly.setEnabled(false);
        rCountOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rCountOnlyActionPerformed(evt);
            }
        });

        buttonGroup2.add(rDistinctAttr);
        rDistinctAttr.setText("distinct attribute");
        rDistinctAttr.setEnabled(false);
        rDistinctAttr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rDistinctAttrActionPerformed(evt);
            }
        });

        buttonGroup2.add(rSelectedAttrs);
        rSelectedAttrs.setText("selected multiple attributes");
        rSelectedAttrs.setEnabled(false);
        rSelectedAttrs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSelectedAttrsActionPerformed(evt);
            }
        });

        cDistinctAttr.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "id", "description" }));
        cDistinctAttr.setEnabled(false);

        jScrollPane4.setToolTipText("sadasdasdsadsad");

        listSelectedAttrs.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "id", "description" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listSelectedAttrs.setEnabled(false);
        listSelectedAttrs.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                listSelectedAttrsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                listSelectedAttrsFocusLost(evt);
            }
        });
        jScrollPane4.setViewportView(listSelectedAttrs);

        lHoldCtrlToSelectMultipleItems.setFont(new java.awt.Font("Tahoma", 0, 10));
        lHoldCtrlToSelectMultipleItems.setText("(hold Ctrl to select multiple items)");
        lHoldCtrlToSelectMultipleItems.setEnabled(false);

        javax.swing.GroupLayout fOutputTypePanelLayout = new javax.swing.GroupLayout(fOutputTypePanel);
        fOutputTypePanel.setLayout(fOutputTypePanelLayout);
        fOutputTypePanelLayout.setHorizontalGroup(
            fOutputTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fOutputTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fOutputTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rSelectedAttrs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(rWholeObject, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(rCountOnly, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(rDistinctAttr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))
            .addGroup(fOutputTypePanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(cDistinctAttr, 0, 148, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(fOutputTypePanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(fOutputTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lHoldCtrlToSelectMultipleItems)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                .addContainerGap())
        );
        fOutputTypePanelLayout.setVerticalGroup(
            fOutputTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fOutputTypePanelLayout.createSequentialGroup()
                .addComponent(rWholeObject)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rCountOnly)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rDistinctAttr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cDistinctAttr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rSelectedAttrs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lHoldCtrlToSelectMultipleItems, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(fCriteriaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fOutputTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fCriteriaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(fOutputTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout fQueryBuilderPanelLayout = new javax.swing.GroupLayout(fQueryBuilderPanel);
        fQueryBuilderPanel.setLayout(fQueryBuilderPanelLayout);
        fQueryBuilderPanelLayout.setHorizontalGroup(
            fQueryBuilderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelUmlClass, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
            .addGroup(fQueryBuilderPanelLayout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        fQueryBuilderPanelLayout.setVerticalGroup(
            fQueryBuilderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fQueryBuilderPanelLayout.createSequentialGroup()
                .addComponent(labelUmlClass, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane2.setRightComponent(fQueryBuilderPanel);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Select uml class"));

        listUmlClassesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(listUmlClassesList);

        bNewQuery.setText("New query >>");
        bNewQuery.setEnabled(false);
        bNewQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewQueryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
            .addComponent(bNewQuery, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bNewQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane2.setLeftComponent(jPanel2);

        tQueryTabb.addTab("Build CQL query", jSplitPane2);

        saveAndConvertButton.setText("Save and convert to manual query");
        saveAndConvertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAndConvertButtonActionPerformed(evt);
            }
        });

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("View or edit the query"));

        jScrollPane1.setViewportView(textpaneManualQuery);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 911, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(saveAndConvertButton)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveAndConvertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tQueryTabb.addTab("View the query", jPanel13);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tQueryTabb, javax.swing.GroupLayout.DEFAULT_SIZE, 948, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tQueryTabb, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel12);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputUrl, javax.swing.GroupLayout.DEFAULT_SIZE, 799, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bGoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bGoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputUrlKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputUrlKeyPressed
        if (evt.getKeyCode() == 10) {//if Enter pressed
            bGoButton.doClick();
        }
}//GEN-LAST:event_inputUrlKeyPressed

    private void bSumbitQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSumbitQueryActionPerformed
        try {
            Node cqlQueryElement = null;
            if (isQueryManual) {
                cqlQueryElement = Utils.textToDOMNode(textpaneManualQuery.getText());
                //  _outputCQLQuery = new SavedQueryWindowState(Utils.prettyprint(cqlQueryElement), fUrl, checkAddInputData.isSelected());
            } else {
                cqlQueryElement = this.getCqlQuery().get_mainNode();
                //   _outputCQLQuery = new SavedQueryWindowState(mainGroupNode, fUml, fUrl, checkAddInputData.isSelected());
            }
            if (checkAddInputData.isSelected()) {
                _outputValue = Utils.prettyprint(Utils.createQueryCallBody(cqlQueryElement));
            } else {
                _outputValue = Utils.prettyprint(cqlQueryElement);
            }

            System.err.println("Stored value:" + _outputValue);

            this.dispose();//the window was modal
        } catch (SAXException sxe) {
            JOptionPane.showMessageDialog(rootPane, "Entered query is not a valid xml!", "Error", 0);
        }
}//GEN-LAST:event_bSumbitQueryActionPerformed

    private void bGoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGoButtonActionPerformed
        fUrl = inputUrl.getText().trim();
        inputUrl.setText(fUrl);
        initGUIcomponentsForNewService();
}//GEN-LAST:event_bGoButtonActionPerformed

    private void tabbedMetadataPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedMetadataPaneStateChanged
        int selected = tabbedMetadataPane.getSelectedIndex();
        switch (selected) {
            case 0:
                if ("".equals(textPaneGeneralInfo.getText())) {
                    try {
                        startWaitCursor();
                        textPaneGeneralInfo.setText(ServiceDataAccess.getTextGeneralInfo(fUrl));
                        textPaneGeneralInfo.setCaretPosition(0);
                    } finally {
                        stopWaitCursor();
                    }

                }
                break;

            case 1:
                if ("".equals(textPaneSemMetadata.getText())) {
                    try {
                        startWaitCursor();
                        textPaneSemMetadata.setText(ServiceDataAccess.getTextSemanticMetadata(fUrl));
                        textPaneSemMetadata.setCaretPosition(0);
                    } finally {
                        stopWaitCursor();
                    }

                }
                break;
            case 2:
                if ("".equals(textPaneDomainModel.getText())) {
                    try {
                        startWaitCursor();
                        textPaneDomainModel.setText(ServiceDataAccess.getTextDomainModel(fUrl));
                        textPaneDomainModel.setCaretPosition(0);
                    } finally {
                        stopWaitCursor();
                    }

                }
                break;
            case 3:
                if ("".equals(textPaneHostRes.getText())) {
                    try {
                        startWaitCursor();
                        textPaneHostRes.setText(ServiceDataAccess.getTextHostingRes(fUrl));
                        textPaneHostRes.setCaretPosition(0);
                    } finally {
                        stopWaitCursor();
                    }

                }
                break;
        }
}//GEN-LAST:event_tabbedMetadataPaneStateChanged

    private void tQueryTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_tQueryTreeValueChanged
        TreePath path = tQueryTree.getSelectionPath();
        if (path != null) {
            selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();
            String selectedNodeName = selectedNode.toString();
            if (selectedNodeName.startsWith(CQLQueryCriterion.TREE_CRITERION_PREFIX)) {//criterion is selected
                bNewCriterion.setEnabled(true);
                bEditCriterion.setEnabled(true);
                bDeleteCriterion.setEnabled(true);
                bNewGroup.setEnabled(false);
                bDeleteGroup.setEnabled(false);
                rAnd.setEnabled(false);
                rOr.setEnabled(false);
            } else {//non-criterion is selected
                bEditCriterion.setEnabled(false);
                bDeleteCriterion.setEnabled(false);
                Object selectedNodeObject = selectedNode.getUserObject();
                if (selectedNode.equals(rootNode)) {//root node or is seleted
                    rAnd.setEnabled(false);
                    rOr.setEnabled(false);
                    bNewGroup.setEnabled(false);
                    bDeleteGroup.setEnabled(false);
                    bNewCriterion.setEnabled(false);
                } else {//either gorup node or empty group marker is selected
                    rAnd.setEnabled(true);
                    rOr.setEnabled(true);
                    bNewGroup.setEnabled(true);
                    bDeleteGroup.setEnabled(!selectedNode.equals(mainGroupNode));//not possible to remove main node
                    if (selectedNodeName.equals(TREE_LOGIC_AND)) {//the group is "AND"
                        rAnd.setSelected(true);
                    } else {//the group is "OR"
                        rOr.setSelected(true);
                    }

                    bNewCriterion.setEnabled(true);

                    //make it possible to add new criterion when marker is selected
                    if (selectedNodeObject.equals(NodeAddDeleteController.TREE_EMPTY_GROUP)) {//an empty group marker is selected
                        rAnd.setEnabled(false);
                        rOr.setEnabled(false);
                        bNewGroup.setEnabled(false);
                        bDeleteGroup.setEnabled(false);
                    }

                }
            }

        }
    }//GEN-LAST:event_tQueryTreeValueChanged

    /**
     * Method for adding a new criterion;
     * if there was a <add criterion> node, it is removed        
     */
    private void bNewCriterionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewCriterionActionPerformed
        //this is if someone clicked "new criterion" having something else than logic group selected
        if (!selectedNode.getUserObject().equals(TREE_LOGIC_AND) && !selectedNode.getUserObject().equals(TREE_LOGIC_OR)) {
            selectedNode = (DefaultMutableTreeNode) selectedNode.getParent();
        }
        CriterionAddEditWindow window = new CriterionAddEditWindow(fUml, null, "Add criterion");
        //modal
        CQLQueryCriterion newCriterion = window.getCriterion();
        if (newCriterion != null) {
            newCriterion(selectedNode, newCriterion, -1);
        }
        updateSubmitQueryBttn();
}//GEN-LAST:event_bNewCriterionActionPerformed

    private void bEditCriterionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditCriterionActionPerformed
        CriterionAddEditWindow window = new CriterionAddEditWindow(fUml, (CQLQueryCriterion) selectedNode.getUserObject(), "Edit criterion");
        //modal
        CQLQueryCriterion newCriterion = window.getCriterion();
        if (newCriterion != null) {
            int i = selectedNode.getParent().getIndex(selectedNode);
            deleteCriterion(selectedNode);
            newCriterion((DefaultMutableTreeNode) selectedNode.getParent(), newCriterion, i);
        }
        updateSubmitQueryBttn();
}//GEN-LAST:event_bEditCriterionActionPerformed

    private void bDeleteCriterionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteCriterionActionPerformed
        int res = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete the following criterion?\n" + selectedNode.toString(), "Delete criterion", JOptionPane.YES_NO_OPTION);
        if (res == 0) {
            deleteCriterion(selectedNode);
        }
        updateSubmitQueryBttn();
}//GEN-LAST:event_bDeleteCriterionActionPerformed

    private void rAndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rAndActionPerformed
        selectedNode.setUserObject(TREE_LOGIC_AND);
        tQueryTree.repaint();
}//GEN-LAST:event_rAndActionPerformed

    private void rOrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rOrActionPerformed
        selectedNode.setUserObject(TREE_LOGIC_OR);
        tQueryTree.repaint();
}//GEN-LAST:event_rOrActionPerformed

    private void bNewGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewGroupActionPerformed
        newGroup(selectedNode, rAnd.isSelected() ? TREE_LOGIC_AND : TREE_LOGIC_OR, 0);
        /*expand tree and make new group node selected*/
        updateSubmitQueryBttn();

}//GEN-LAST:event_bNewGroupActionPerformed

    private void bDeleteGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteGroupActionPerformed
        //int i = targetParentNode.getParent().getIndex(targetParentNode);
        int res = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete this logic gorup and all of its subelements?", "Delete logic group", JOptionPane.YES_NO_OPTION);
        if (res == 0) {
            deleteGroup(selectedNode);
        }
        updateSubmitQueryBttn();
}//GEN-LAST:event_bDeleteGroupActionPerformed

    private void rWholeObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rWholeObjectActionPerformed
        listSelectedAttrs.setEnabled(false);
        cDistinctAttr.setEnabled(false);
}//GEN-LAST:event_rWholeObjectActionPerformed

    private void rCountOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rCountOnlyActionPerformed
        listSelectedAttrs.setEnabled(false);
        cDistinctAttr.setEnabled(false);
}//GEN-LAST:event_rCountOnlyActionPerformed

    private void rDistinctAttrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rDistinctAttrActionPerformed
        listSelectedAttrs.setEnabled(false);
        cDistinctAttr.setEnabled(true);
}//GEN-LAST:event_rDistinctAttrActionPerformed

    private void rSelectedAttrsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSelectedAttrsActionPerformed
        listSelectedAttrs.setEnabled(true);
        cDistinctAttr.setEnabled(false);
}//GEN-LAST:event_rSelectedAttrsActionPerformed

    private void listSelectedAttrsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_listSelectedAttrsFocusGained
        lHoldCtrlToSelectMultipleItems.setVisible(true);
}//GEN-LAST:event_listSelectedAttrsFocusGained

    private void listSelectedAttrsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_listSelectedAttrsFocusLost
        lHoldCtrlToSelectMultipleItems.setVisible(false);
}//GEN-LAST:event_listSelectedAttrsFocusLost

    private void bNewQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewQueryActionPerformed
        if (fUml == null) {
            jSplitPane1.setDividerLocation(150);
            jSplitPane2.setDividerLocation(200);
            fQueryBuilderPanel.setVisible(true);
            bSumbitQuery.setVisible(true);
        }

        newQuery();
}//GEN-LAST:event_bNewQueryActionPerformed

    private void saveAndConvertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndConvertButtonActionPerformed
        int response = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to convert the query to manual query?\nIf you do so, you will be not able to edit it in CQLBuilder anymore.", "Question", 2);
        if (response == 0) {//ok

            isQueryManual = true;

            tQueryTabb.setEnabledAt(0, false);
            JOptionPane.showMessageDialog(rootPane, "Query converted to manual query!");
            saveAndConvertButton.setVisible(false);
        }
        updateSubmitQueryBttn();
}//GEN-LAST:event_saveAndConvertButtonActionPerformed

    private void tQueryTabbStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tQueryTabbStateChanged
        if (tQueryTabb.getSelectedIndex() == 1 && !isQueryManual) {
            CQLQuery query = getCqlQuery();
            textpaneManualQuery.setText(query != null ? Utils.prettyprint(query.get_mainNode()) : "<no query yet>");
        }
    }//GEN-LAST:event_tQueryTabbStateChanged

    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_bCancelActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCancel;
    private javax.swing.JButton bDeleteCriterion;
    private javax.swing.JButton bDeleteGroup;
    private javax.swing.JButton bEditCriterion;
    private javax.swing.JButton bGoButton;
    private javax.swing.JButton bNewCriterion;
    private javax.swing.JButton bNewGroup;
    private javax.swing.JButton bNewQuery;
    private javax.swing.JButton bSumbitQuery;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cDistinctAttr;
    private javax.swing.JCheckBox checkAddInputData;
    private javax.swing.JPanel fCriteriaPanel;
    private javax.swing.JPanel fOutputTypePanel;
    private javax.swing.JPanel fQueryBuilderPanel;
    private javax.swing.JTextField inputUrl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JLabel lHoldCtrlToSelectMultipleItems;
    private javax.swing.JTextField labelUmlClass;
    private javax.swing.JList listSelectedAttrs;
    private javax.swing.JList listUmlClassesList;
    private javax.swing.JRadioButton rAnd;
    private javax.swing.JRadioButton rCountOnly;
    private javax.swing.JRadioButton rDistinctAttr;
    private javax.swing.JRadioButton rOr;
    private javax.swing.JRadioButton rSelectedAttrs;
    private javax.swing.JRadioButton rWholeObject;
    private javax.swing.JButton saveAndConvertButton;
    private javax.swing.JTabbedPane tQueryTabb;
    private javax.swing.JTree tQueryTree;
    private javax.swing.JTabbedPane tabbedMetadataPane;
    private javax.swing.JTextPane textPaneDomainModel;
    private javax.swing.JTextPane textPaneGeneralInfo;
    private javax.swing.JTextPane textPaneHostRes;
    private javax.swing.JTextPane textPaneSemMetadata;
    private javax.swing.JTextPane textpaneManualQuery;
    // End of variables declaration//GEN-END:variables
    /*****************************************************************************
     *   HERE STARTS ..::NON-GENERATED, NORMAL CODE::..
     ******************************************************************************/
    private String fUrl;
    private UMLClass fUml;
//cursors:
    private static final Cursor _WAIT_CURSOR = new Cursor(Cursor.WAIT_CURSOR);
    private static final Cursor _DEFAULT_CURSOR = new Cursor(Cursor.DEFAULT_CURSOR);
    private static final Cursor _N_RESIZE_CURSOR = new Cursor(Cursor.N_RESIZE_CURSOR);
    //query tree related variables:
    private DefaultMutableTreeNode rootNode;
    private DefaultTreeModel treeModel;
    private DefaultMutableTreeNode selectedNode;
    private DefaultMutableTreeNode mainGroupNode;
    private static final String TREE_LOGIC_AND = "AND";
    private static final String TREE_LOGIC_OR = "OR";
    private static final String TREE_ROOT = "<CQL query>";
    //output type panel related variables
    private DefaultListModel umlClassesModel = new DefaultListModel();
    private DefaultListModel attributesModel = new DefaultListModel();
    private boolean isQueryManual = false;
    //private SavedQueryWindowState _outputCQLQuery = null;
    private NodeAddDeleteController nodeController = new NodeAddDeleteController();
    //output value of the CQLBuilder - the cql query as string. Also service's url is an output value.
    private String _outputValue = null;

    //THREE OUTPUT VALUES FOR THE PLUGIN:
    public String getOutputValueCQLQuery() {
        return _outputValue;
    }

    public String getOutputValueUrl() {
        return fUrl;
    }

    public boolean getOutputValueIsManual() {
        return isQueryManual;
    }

    /**
     * Main method, invoking main window, with given service's url (url may be edited
     * by the application's user)
     * @param args
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                //   new AppWindow("http://array.nci.nih.gov/wsrf/services/cagrid/CaArraySvc").setVisible(true);
                //   new AppWindow("http://cagrid-service.nci.nih.gov:8080/wsrf/services/cagrid/CaDSRService").setVisible(true);
                //   new AppWindow("http://cagrid.jax.org:18080/wsrf/services/cagrid/CaArraySvc").setVisible(true);
                //   new AppWindow("http://cagrid-service.nci.nih.gov:8080/wsrf/services/cagrid/GlobalModelExchange").setVisible(true);
                //  new AppWindow("http://cananolab.abcc.ncifcrf.gov:80/wsrf-canano/services/cagrid/CaNanoLabService").setVisible(true);
                //  new AppWindow("http://cabio-gridservice.nci.nih.gov:80/wsrf-cabio/services/cagrid/CaBIOSvc").setVisible(true);
                new CQLBuilderMAIN(null, null, false);
                // new CQLBuilderMAIN("http://array.nci.nih.gov/wsrf/services/cagrid/CaArraySvc?wsdl", "<QueryRequest xmlns=\"http://gov.nih.nci.cagrid.data/DataService\">   <cqlQuery>     <CQLQuery xmlns=\"http://CQL.caBIG/1/gov.nih.nci.cagrid.CQLQuery\">       <Target name=\"gov.nih.nci.caarray.domain.array.ArrayGroup\">         <Group logicRelation=\"AND\">           <Attribute name=\"bigid\" predicate=\"EQUAL_TO\" value=\"56\"/>         </Group>       </Target>     </CQLQuery>   </cqlQuery> </QueryRequest>", false);
                //new CQLBuilderMAIN("http://array.nci.nih.gov/wsrf/services/cagrid/CaArraySvc?wsdl",null,false);
            }
        });
    }

    /**
     * Constructor
     * - set url field
     * - init components - NETBEANS GENERATED method which does all neccessary job
     * to make the window look like in Form Editor
     * - set additional properties of GUI components, that will not change throughout whole
     * application's execution
     * - launch initGUIcomponentsForNewService() method, that will (based on url of the service)
     * set all the GUI elements' content and their size and visibility, so that
     * everything's prepared for starting creating a new query
     * @param fUrl
     */
    public CQLBuilderMAIN(String fUrl, String cqlCQLQuery, boolean wasTheQueryManual) {
        //cqlCQLQuery = JOptionPane.showInputDialog(rootPane, "enterTheQuery");
        System.out.println("Entering CQLBuilderMAIN with the following: " + fUrl + "," + cqlCQLQuery + "," + wasTheQueryManual);

        setModal(true);
        initComponents();
        this.fUrl = fUrl;
        if (fUrl != null) {
            inputUrl.setText(fUrl);
            initGUIcomponentsForNewService();
            if (cqlCQLQuery != null) {//init with exsiting query
                //assume that fUrl !=null!!

                bGoButton.doClick();
                initBuilderWithExistingQuery(cqlCQLQuery, wasTheQueryManual);
            }
        }
    //    bGoButton.doClick();
        setVisible(true);
    }

    /**
     * Method called from constructor
     * - init GUI components - make proper buttons, panels, scrollpanes, tabs, etc. visible, enabled, disabled, etc.
     * - load service's data - fill in uml classes list and metadata tabbed pane by service's metadata
     */
    private void initGUIcomponentsForNewService() {
        try {
            _outputValue = null;
//            _outputCQLQuery = null;

            saveAndConvertButton.setVisible(true);

            tQueryTabb.setEnabledAt(0, true);
            tQueryTabb.setEnabled(false);
            tabbedMetadataPane.setEnabled(false);

            tQueryTabb.setSelectedIndex(0);
            tabbedMetadataPane.setSelectedIndex(0);

            textPaneDomainModel.setFont(new java.awt.Font(Font.MONOSPACED, 0, 13));
            textPaneGeneralInfo.setFont(new java.awt.Font(Font.MONOSPACED, 0, 13));
            textPaneHostRes.setFont(new java.awt.Font(Font.MONOSPACED, 0, 13));
            textPaneSemMetadata.setFont(new java.awt.Font(Font.MONOSPACED, 0, 13));

            attributesModel =
                    new DefaultListModel();
            listSelectedAttrs.setModel(attributesModel);


            /*init GUI components*/

            //clear metadata panel
            textPaneDomainModel.setText("");
            textPaneGeneralInfo.setText("");
            textPaneHostRes.setText("");
            textPaneSemMetadata.setText("");

            //disable output type panel
            ((TitledBorder) fOutputTypePanel.getBorder()).setTitleColor(fOutputTypePanel.getBackground());
            rCountOnly.setEnabled(false);
            rDistinctAttr.setEnabled(false);
            rSelectedAttrs.setEnabled(false);
            rWholeObject.setEnabled(false);
            cDistinctAttr.setEnabled(false);
            listSelectedAttrs.setEnabled(false);
            lHoldCtrlToSelectMultipleItems.setVisible(false);

            //disable query tree panel
            ((TitledBorder) fCriteriaPanel.getBorder()).setTitleColor(fCriteriaPanel.getBackground());
            tQueryTree.setEnabled(false);
            labelUmlClass.setEnabled(false);
            bNewCriterion.setEnabled(false);
            bEditCriterion.setEnabled(false);
            bDeleteCriterion.setEnabled(false);
            bNewGroup.setEnabled(false);
            bDeleteGroup.setEnabled(false);
            rAnd.setEnabled(false);
            rOr.setEnabled(false);

            //disable sumbit query button
            bSumbitQuery.setEnabled(false);

            //disable new query button
            bNewQuery.setEnabled(false);

            //clear the tree
            clearTree();

            /*load service's data*/
//load UML classes list
            umlClassesModel =
                    new DefaultListModel();
            listUmlClassesList.setModel(umlClassesModel);
            List<UMLClass> umlClasses = Collections.emptyList();
            try {
                startWaitCursor();
                umlClasses =
                        ServiceDataAccess.getUmlClasses(fUrl);
                Collections.sort(umlClasses);
            } finally {
                stopWaitCursor();
            }

            int i = 0;
            for (UMLClass uml : umlClasses) {
                umlClassesModel.add(i, uml);
                i++;

            }



            listUmlClassesList.setSelectedIndex(0);
            //and make it possible to choose a UML class
            bNewQuery.setEnabled(true);

            //load service's metada
            tabbedMetadataPaneStateChanged(null);

            tQueryTabb.setEnabled(true);
            tabbedMetadataPane.setEnabled(true);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "An unexpected exception occured during invoking the service: " + e.getClass().getName()+"\n"+e.getMessage(), "Error", 0);
        }

    }

    /**
     * Method for clearing the query tree
     * - remove all children from mainGroupNode
     * - add <add criterion> node to it
     * - expand tree
     */
    public void clearTree() {
        mainGroupNode.removeAllChildren();
        nodeController.resetCounter();
        mainGroupNode.add(new DefaultMutableTreeNode(NodeAddDeleteController.TREE_EMPTY_GROUP));
        nodeController.incCounter();
        treeModel.reload();
        expandTreeAndSelectNode(null);
    }

    /**
     * Method that prepares everything for new query construction, for given UML class
     * - get new UML class from selected element in the UML classes list
     * - clear the query tree
     * - clear "output type" list and combo box, and fill them with new data
     * - adjust GUI elements - visible, enabled, disabled, etc.
     */
    private void newQuery() {
        rWholeObject.setSelected(true);

        //get the new UML class from selected element in UML class list
        fUml =
                (UMLClass) umlClassesModel.getElementAt(listUmlClassesList.getSelectedIndex());
        //set the label
        labelUmlClass.setText("UML class name: " + fUml.toString());
        labelUmlClass.setEnabled(true);

        //clear the query tree
        clearTree();

        //clear "output type" list and combo box with UML class' attributes
        attributesModel.removeAllElements();
        cDistinctAttr.removeAllItems();

        //fill in query attributes' list and combo box with data of new UML class
        LinkedList<UMLClassAttribute> attrs = fUml.getAttributes();
        int i = 0;
        for (UMLClassAttribute attr : attrs) {
            attributesModel.add(i, attr);
            cDistinctAttr.addItem(attr);
            i++;

        }

        /*adjust GUI elements*/

//set query tree elements:

        ((TitledBorder) fCriteriaPanel.getBorder()).setTitleColor(((TitledBorder) jPanel2.getBorder()).getTitleColor());
        selectedNode =
                (DefaultMutableTreeNode) mainGroupNode.getFirstChild();
        expandTreeAndSelectNode(selectedNode);
        tQueryTree.setEnabled(true);

        //set "output type" elements
        ((TitledBorder) fOutputTypePanel.getBorder()).setTitleColor(((TitledBorder) jPanel2.getBorder()).getTitleColor());
        rCountOnly.setEnabled(true);
        rDistinctAttr.setEnabled(true);
        rSelectedAttrs.setEnabled(true);
        rWholeObject.setEnabled(true);

        //disable "submit query" button
        bSumbitQuery.setEnabled(false);
    }

    /**
     * Sets the "submit query" button enabled or disabled,
     * depending on if there are any empty groups or not
     */
    private void updateSubmitQueryBttn() {
        bSumbitQuery.setEnabled(isQueryValidYet());
    }

    /**
     * Expands the tree so that all nodes are visible and then selects given
     * node (if not null)
     * @param node
     */
    private void expandTreeAndSelectNode(DefaultMutableTreeNode node) {
        int row = 0;
        while (row < tQueryTree.getRowCount()) {
            tQueryTree.expandRow(row);
            row++;
        }

        if (node != null) {
            TreePath newNodePath = new TreePath(node.getPath());
            tQueryTree.scrollPathToVisible(newNodePath);
            tQueryTree.setSelectionPath(newNodePath);

            selectedNode = node;
            //this will update all the query tree buttons
            tQueryTreeValueChanged(null);
        }

    }

    /**
     * Dynamically returns the query represented by current state of gui components
     * @return
     */
    private CQLQuery getCqlQuery() {
        if (!isQueryValidYet()) {
            return null;
        }
        /*get return type*/
        String[] returnAttrs = new String[0];
        if (rDistinctAttr.isSelected()) {
            returnAttrs = new String[1];
            returnAttrs[0] = ((UMLClassAttribute) cDistinctAttr.getSelectedObjects()[0]).getName();
        } else if (rSelectedAttrs.isSelected()) {
            Object[] selectedObjects = listSelectedAttrs.getSelectedValues();
            returnAttrs = new String[selectedObjects.length];
            if (selectedObjects.length == 0) {
                return null;
            }

            for (int i = 0; i < selectedObjects.length; i++) {
                UMLClassAttribute selObj = (UMLClassAttribute) selectedObjects[i];
                returnAttrs[i] = selObj.getName();
            }

        }

        /*create the query*/
        return CQLQuery.newCqlQuery(fUml.getFullName(), mainGroupNode, rCountOnly.isSelected(), returnAttrs);
    }

    /**
     * The query will be valid ff the query has no empty gorups,
     * and in case it is manual.. (then it is enough it is valid xml
     * which is checked at Save the query button pressing),
     * nothing else is validated
     * @return
     */
    public boolean isQueryValidYet() {
        if (!isQueryManual) {
            return nodeController.isQueryValid();
        } else {
            return true;
        }
    }

    private void newCriterion(DefaultMutableTreeNode targetParentNode, CQLQueryCriterion userObject, int pos) {
        DefaultMutableTreeNode toSelect = nodeController.newTreeNode((DefaultMutableTreeNode) targetParentNode, userObject, pos, false);
        treeModel.reload();
        expandTreeAndSelectNode(toSelect);
    }

    /**
     * Method for deleting a criterion. If the criterion is the last child
     * of a parent, a <add criterion> node is added
     * @param index
     */
    private void deleteCriterion(DefaultMutableTreeNode nodeToDelete) {
        int i = nodeToDelete.getParent().getIndex(nodeToDelete);
        DefaultMutableTreeNode toSelect = nodeController.deleteTreeNode((DefaultMutableTreeNode) nodeToDelete.getParent(), i);
        treeModel.reload();
        expandTreeAndSelectNode(toSelect);
    }

    private DefaultMutableTreeNode newGroup(DefaultMutableTreeNode targetParentNode, String predicate, int pos) {
        DefaultMutableTreeNode newNode = nodeController.newTreeNode(targetParentNode, predicate, pos, true);
        treeModel.reload();
        expandTreeAndSelectNode(newNode);
        return newNode;
    }

    private void deleteGroup(DefaultMutableTreeNode nodeToDelete) {
        DefaultMutableTreeNode toSelect = nodeController.deleteTreeNode((DefaultMutableTreeNode) nodeToDelete.getParent(), nodeToDelete.getParent().getIndex(nodeToDelete));
        treeModel.reload();
        expandTreeAndSelectNode(toSelect);
    }

    private void initBuilderWithExistingQuery(String savedQuery, boolean wasManual) {
        try {
            if (wasManual) {
                isQueryManual = true;
                initFromManualQuery(savedQuery);
            } else {
                isQueryManual = false;
                initWithNonManualQuery(savedQuery);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "An error occured while trying to recover the query: " + e.getClass().getName(), "Error", 0);
            e.printStackTrace();
        }
    }

    private void initWithNonManualQuery(String savedQuery) throws SAXException {

        Node queryElement = Utils.textToDOMNode(savedQuery);
        Node removedElement = Utils.removeQueryCallBody(queryElement);

        if (removedElement != null) {
            queryElement = removedElement;
            checkAddInputData.setSelected(true);
        } else {
            checkAddInputData.setSelected(false);
        }

        NodeList mainNodesChildren = queryElement.getChildNodes();

        //set UMLClass
        Node targetNode = mainNodesChildren.item(0);
        NamedNodeMap attrs = targetNode.getAttributes();
        String umlClassFullName = attrs.getNamedItem("name").getNodeValue();
        for (int i = 0; i < umlClassesModel.getSize(); i++) {
            if (umlClassFullName.equals(((UMLClass) umlClassesModel.get(i)).getFullName())) {
                listUmlClassesList.setSelectedIndex(i);
                bNewQuery.doClick();
                break;
            }
        }

        //set outout type (queryModifiers)
        if (mainNodesChildren.getLength() <= 1) {
            rWholeObject.setSelected(true);
        } else {
            Node queryModifier = mainNodesChildren.item(1);
            NodeList queryModifierChildren = queryModifier.getChildNodes();
            if (queryModifierChildren.getLength() == 0) {
                rCountOnly.setSelected(true);
            } else {
                if ("DistinctAttribute".equals(queryModifierChildren.item(0).getNodeName())) {
                    rDistinctAttr.setSelected(true);
                    cDistinctAttr.setEnabled(true);
                    String value = queryModifierChildren.item(0).getChildNodes().item(0).getNodeValue().trim();
                    for (int i = 0; i < cDistinctAttr.getItemCount(); i++) {
                        if (value.equals(((UMLClassAttribute) cDistinctAttr.getItemAt(i)).getName())) {
                            cDistinctAttr.setSelectedIndex(i);
                            break;
                        }
                    }
                } else {
                    rSelectedAttrs.setSelected(true);
                    listSelectedAttrs.setEnabled(true);
                    for (int i = 0; i < queryModifierChildren.getLength(); i++) {
                        Node attributeNameNode = queryModifierChildren.item(i);
                        String attributeName = attributeNameNode.getChildNodes().item(0).getNodeValue().trim();
                        for (int j = 0; j < attributesModel.getSize(); j++) {
                            if (attributeName.equals(((UMLClassAttribute) attributesModel.getElementAt(j)).getName())) {
                                listSelectedAttrs.addSelectionInterval(j, j);
                            }
                        }
                    }
                }
            }
        }

        //set the query itself
        rootNode.removeAllChildren();
        mainGroupNode = addGroupFromDOMNode(targetNode.getFirstChild(), rootNode);
        
        //   treeModel.reload();
        nodeController.resetCounter();
        updateSubmitQueryBttn();



    }

    /**
     * Used in initBuilderWithExistingQuery method
     * @param groupNode
     */
    private DefaultMutableTreeNode addGroupFromDOMNode(Node groupNode, DefaultMutableTreeNode targetNode) {
        String predicate = groupNode.getAttributes().getNamedItem("logicRelation").getNodeValue();
        expandTreeAndSelectNode(targetNode);
        DefaultMutableTreeNode newGroupNode = newGroup(selectedNode, predicate, -1);
        if (TREE_LOGIC_AND.equals(predicate)) {
            rAnd.setSelected(true);
        } else {
            rOr.setSelected(true);
        }
        NodeList children = groupNode.getChildNodes();
        for (int i = 0; i < children.getLength(); i++) {
            Node child = children.item(i);
            if ("Group".equals(child.getNodeName())) {
                addGroupFromDOMNode(child, newGroupNode);
            } else {
                addCriterionFromDOMNode(child, newGroupNode);
            }
        }
        treeModel.reload();
        expandTreeAndSelectNode(newGroupNode);
        return newGroupNode;
    }
    
     /**
     * Used in initBuilderWithExistingQuery method
     * @param criterionNode
     */
    private void addCriterionFromDOMNode(Node criterionNode, DefaultMutableTreeNode targetNode) {
        CQLQueryCriterion cqlCrit = new CQLQueryCriterion();
        Node currNode = criterionNode;

        LinkedList<CQLQueryAssociation> listAssoc = null;
        if ("Association".equals(criterionNode.getNodeName())) {
            listAssoc = new LinkedList<CQLQueryAssociation>();
            while ("Association".equals(currNode.getNodeName())) {
                String name = currNode.getAttributes().getNamedItem("name").getNodeValue();
                String umlName = name.substring(name.lastIndexOf('.') + 1);
                String packageName = name.substring(0, name.lastIndexOf('.'));
                String roleName = currNode.getAttributes().getNamedItem("roleName").getNodeValue();
                CQLQueryAssociation assoc = new CQLQueryAssociation(umlName, packageName, roleName);
                listAssoc.add(assoc);
                currNode = currNode.getFirstChild();
            }
        }

        //Attribute
        String name = currNode.getAttributes().getNamedItem("name").getNodeValue();
        String predicate = currNode.getAttributes().getNamedItem("predicate").getNodeValue();
        Node valueNode = currNode.getAttributes().getNamedItem("value");//what is IS_NULL? is value null or ""
        String value;
        if (valueNode != null) {
            value = valueNode.getNodeValue();
        } else {
            value = "";
        }

        cqlCrit.set_predicate(predicate);
        cqlCrit.set_value(value);

        if (listAssoc != null) {
            cqlCrit.setAssociations(listAssoc, name);
        } else {
            cqlCrit.set_attributeName(name);
        }

        DefaultMutableTreeNode newCriterionNode = nodeController.newTreeNode(targetNode, cqlCrit, -1, false);
        treeModel.reload();
        expandTreeAndSelectNode(newCriterionNode);
    }

    private void initFromManualQuery(String savedQuery) {
        try {
            textpaneManualQuery.validate();
            textpaneManualQuery.repaint();
            saveAndConvertButton.setVisible(false);
            bGoButton.setEnabled(false);
            tQueryTabb.setSelectedIndex(1);
            tQueryTabb.setEnabledAt(0, false);

            //check if the query constains service input already
            Node queryElement = Utils.textToDOMNode(savedQuery);
            Node removedElement = Utils.removeQueryCallBody(queryElement);
            if (removedElement != null) {
                queryElement = removedElement;
                checkAddInputData.setSelected(true);
            } else {
                checkAddInputData.setSelected(false);
            }

            textpaneManualQuery.setText(Utils.prettyprint(queryElement));
            updateSubmitQueryBttn();
        } catch (SAXException ex) {
            Logger.getLogger(CQLBuilderMAIN.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /***************************************************************************/
    /** Sets cursor for specified component to Wait cursor
     * source:
     * 2003-03-06 The Java Specialists' Newsletter [Issue 065] - Wait, Cursor, Wait!
     * Author: Herman Lintvelt (Polymorph Systems)
     */
    public void startWaitCursor() {
        RootPaneContainer root =
                (RootPaneContainer) rootPane.getTopLevelAncestor();
        root.getGlassPane().setCursor(_WAIT_CURSOR);
        root.getGlassPane().setVisible(true);
    }

    /** Sets cursor for specified component to normal cursor
     * source:
     * 2003-03-06 The Java Specialists' Newsletter [Issue 065] - Wait, Cursor, Wait!
     * Author: Herman Lintvelt (Polymorph Systems)
     */
    public void stopWaitCursor() {
        RootPaneContainer root =
                (RootPaneContainer) rootPane.getTopLevelAncestor();
        root.getGlassPane().setCursor(_DEFAULT_CURSOR);
    }

    public void startResizeNCursor() {
        RootPaneContainer root =
                (RootPaneContainer) rootPane.getTopLevelAncestor();
        root.getGlassPane().setCursor(_N_RESIZE_CURSOR);
        root.getGlassPane().setVisible(true);
    }

    /*public SavedQueryWindowState getOutputCQLQuery() {
    return _outputCQLQuery;
    }
    private void initBuilderWithExistingQuery(SavedQueryWindowState savedQuery) {
    _outputCQLQuery = savedQuery;
    if (savedQuery.isManual()) {//manual query
    textpaneManualQuery.validate();
    textpaneManualQuery.repaint();
    saveAndConvertButton.setVisible(false);
    tQueryTabb.setSelectedIndex(1);
    tQueryTabb.setEnabledAt(0, false);
    textpaneManualQuery.setText(savedQuery.getManualString());
    isQueryManual =
    true;
    } else {//query is CQLBuilder query
    System.out.println("query not manual");
    //init UML class list and find UML class of the query, select it act as though New query button was pressed
    System.out.println("search uml");
    int index = 0;
    UMLClass searchedItem = _outputCQLQuery.getUMLClass();
    System.out.println("search for: " + searchedItem.getFullName());
    UMLClass currentItem = null;
    for (index = 0; index <
    umlClassesModel.getSize(); index++) {
    currentItem = (UMLClass) umlClassesModel.getElementAt(index);
    if (searchedItem.equals(currentItem)) {
    System.out.println("found!:" + currentItem.getFullName() + "at " + index);
    break;

    }




    }
    listUmlClassesList.setSelectedIndex(index);
    bNewQueryActionPerformed(null);
    //load the old tree and refresh it
    rootNode.removeAllChildren();
    mainGroupNode =
    _outputCQLQuery.getMainGroupNode();
    rootNode.insert(mainGroupNode, 0);
    System.out.println("load tree...:" + mainGroupNode.getChildAt(0));
    treeModel.reload();
    //tQueryTree.validate();
    expandTreeAndSelectNode(mainGroupNode);
    if (mainGroupNode.getUserObject().equals(TREE_LOGIC_AND)) {
    rAnd.setSelected(true);
    } else {
    rOr.setSelected(true);
    }

    isQueryManual =
    false;
    }

    checkAddInputData.setSelected(_outputCQLQuery.isAddInputForDataServiceCheck());
    updateSubmitQueryBttn();

    }*/
}
