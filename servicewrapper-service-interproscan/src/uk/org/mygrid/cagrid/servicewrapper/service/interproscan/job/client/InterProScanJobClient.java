package uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.client;

import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;

import uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.common.InterProScanJobI;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS
 * METHODS.
 * 
 * This client is generated automatically by Introduce to provide a clean
 * unwrapped API to the service.
 * 
 * On construction the class instance will contact the remote service and
 * retrieve it's security metadata description which it will use to configure
 * the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class InterProScanJobClient extends InterProScanJobClientBase implements
		InterProScanJobI {

	public InterProScanJobClient(String url) throws MalformedURIException,
			RemoteException {
		this(url, null);
	}

	public InterProScanJobClient(String url, GlobusCredential proxy)
			throws MalformedURIException, RemoteException {
		super(url, proxy);
	}

	public InterProScanJobClient(EndpointReferenceType epr)
			throws MalformedURIException, RemoteException {
		this(epr, null);
	}

	public InterProScanJobClient(EndpointReferenceType epr,
			GlobusCredential proxy) throws MalformedURIException,
			RemoteException {
		super(epr, proxy);
	}

	public static void usage() {
		System.out.println(InterProScanJobClient.class.getName()
				+ " -url <service url>");
	}

	public static void main(String[] args) {
		System.out.println("Running the Grid Service Client");
		try {
			if (!(args.length < 2)) {
				if (args[0].equals("-url")) {
					InterProScanJobClient client = new InterProScanJobClient(
							args[1]);
					// place client calls here if you want to use this main as a
					// test....
				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.lifetime.DestroyResponse destroy(org.oasis.wsrf.lifetime.Destroy params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"destroy");
    return portType.destroy(params);
    }
  }

  public org.oasis.wsrf.lifetime.SetTerminationTimeResponse setTerminationTime(org.oasis.wsrf.lifetime.SetTerminationTime params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"setTerminationTime");
    return portType.setTerminationTime(params);
    }
  }

  public org.oasis.wsn.SubscribeResponse subscribe(org.oasis.wsn.Subscribe params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"subscribe");
    return portType.subscribe(params);
    }
  }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public uk.org.mygrid.cagrid.domain.interproscan.InterProScanInput getInputs() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getInputs");
    uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.stubs.GetInputsRequest params = new uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.stubs.GetInputsRequest();
    uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.stubs.GetInputsResponse boxedResult = portType.getInputs(params);
    return boxedResult.getInterProScanInput();
    }
  }

  public uk.org.mygrid.cagrid.domain.common.Job getStatus() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getStatus");
    uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.stubs.GetStatusRequest params = new uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.stubs.GetStatusRequest();
    uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.stubs.GetStatusResponse boxedResult = portType.getStatus(params);
    return boxedResult.getJob();
    }
  }

  public uk.org.mygrid.cagrid.domain.interproscan.InterProScanOutput getOutputs() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getOutputs");
    uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.stubs.GetOutputsRequest params = new uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.stubs.GetOutputsRequest();
    uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.stubs.GetOutputsResponse boxedResult = portType.getOutputs(params);
    return boxedResult.getInterProScanOutput();
    }
  }

  public gov.nih.nci.cagrid.metadata.service.Fault getError() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getError");
    uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.stubs.GetErrorRequest params = new uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.stubs.GetErrorRequest();
    uk.org.mygrid.cagrid.servicewrapper.service.interproscan.job.stubs.GetErrorResponse boxedResult = portType.getError(params);
    return boxedResult.getFault();
    }
  }

}
