<?xml version="1.0" encoding="ISO-8859-1"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="gme://Taverna-caGrid.caBIG/1.0/uk.org.mygrid.cagrid.domain.common"
	xmlns:common="gme://Taverna-caGrid.caBIG/1.0/uk.org.mygrid.cagrid.domain.common"
	xmlns:faults="http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.xsd">
	<xsd:import namespace="http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.xsd" schemaLocation="http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.xsd"></xsd:import>
	<xsd:element name="FASTAProteinSequence"
		type="common:FASTAProteinSequence" />
	<xsd:complexType name="FASTAProteinSequence">
		<xsd:annotation>
			<xsd:documentation>
				FASTA-formatted protein sequence.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension
				base="common:ProteinSequenceRepresentation">
				<xsd:sequence>
					<xsd:element name="sequence" type="xsd:string"
						minOccurs="1" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								FASTA-formatted protein sequence.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="ProteinSequenceRepresentation"
		type="common:ProteinSequenceRepresentation" />
	<xsd:complexType name="ProteinSequenceRepresentation"
		abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				An abstract class that represents a protein. It has two
				concrete subclasses: (1) FASTAProteinSequence to
				represent the case where the actual protein sequence is
				known and being passed, and (2)
				ProteinSequenceIdentifier (in format db:id) to represent
				the case where the sequence identified in a certain
				database is given and the sequence has first to be
				fetched from a protein database (such as uniprot) before
				the InterProScan or BLAST search can be performed on
				that sequence.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="common:SequenceRepresentation">
				<xsd:sequence />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="Error" type="common:Error" />
	<xsd:complexType name="Error" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				An error returned by the wrapped service in case
				something goes wrong during invocation, e.g. wrong input
				parameters passed, analytical service down, etc.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="faults:BaseFaultType">			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="FASTANucleotideSequence"
		type="common:FASTANucleotideSequence" />
	<xsd:complexType name="FASTANucleotideSequence">
		<xsd:annotation>
			<xsd:documentation>
				FASTA-formatted nucleotide sequence.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension
				base="common:NucleotideSequenceRepresentation">
				<xsd:sequence>
					<xsd:element name="sequence" type="xsd:string"
						minOccurs="1" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation>
								FASTA-formatted nucleotide sequence.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="NucleotideSequenceRepresentation"
		type="common:NucleotideSequenceRepresentation" />
	<xsd:complexType name="NucleotideSequenceRepresentation"
		abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				An abstract class that represents a nucleotide. It has
				two concrete subclasses: (1) FASTANucleotideSequence to
				represent the case where the actual protein sequence is
				known and being passed, and (2)
				NucleotideSequenceIdentifier (in format db:id) to
				represent the case where the sequence identified in a
				certain database is given and the sequence has first to
				be fetched from a nucleotide database (such as ncbi)
				before the BLAST search can be performed on that
				sequence.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="common:SequenceRepresentation">
				<xsd:sequence />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="ProteinSequenceIdentifier"
		type="common:ProteinSequenceIdentifier" />
	<xsd:complexType name="ProteinSequenceIdentifier">
		<xsd:annotation>
			<xsd:documentation>
				Protein identifier in format 'db:id'.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension
				base="common:ProteinSequenceRepresentation">
				<xsd:sequence>
					<xsd:element name="sequenceId" type="xsd:string"
						minOccurs="1" maxOccurs="1" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="NucleotideSequenceIdentifier"
		type="common:NucleotideSequenceIdentifier" />
	<xsd:complexType name="NucleotideSequenceIdentifier">
		<xsd:annotation>
			<xsd:documentation>
				Nucleotide identifier in format 'db:id'.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension
				base="common:NucleotideSequenceRepresentation">
				<xsd:sequence>
					<xsd:element name="sequenceId" type="xsd:string"
						minOccurs="1" maxOccurs="1" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="SequenceRepresentation"
		type="common:SequenceRepresentation" />
	<xsd:complexType name="SequenceRepresentation" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				Abstract class to represent a protein or nucleotide.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence />
	</xsd:complexType>
</xsd:schema>
